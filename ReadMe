Preferential Voting
Preferential Voting is the model used in Australia, where we number our order of preference for each candidate. For example, assume that 6 people are trying to be elected:

Candidate	Vote
Paul	4
Joan	3
Stewart	6
Carol	5
Dave	1
Maddy	2
Dave is the voter's first preference, followed by Maddy, Joan, Paul, Carol and Stewart.

Counting these votes is a bit tricky. There are different methods, but for our purposes, let us assume that we have five voters. Their preferences are distributed as follows.

Paul	Joan	Stewart	Carol	Dave	Maddy
1	2	6	4	3	5
6	1	2	5	3	4
1	4	2	6	5	3
2	3	4	1	6	5
4	2	1	3	5	6
5	4	1	3	6	2
The first step is to count all of the first preferences:

Candidate	Votes
Paul	2
Joan	1
Stewart	2
Carol	1
Dave	0
Maddy	0
At this point none of the candidates have over 50%o of the vote, so there is no clear winner. However, neither Maddy nor Dave were able to get any votes. As they have the lowest votes, one of those two people need to be precluded from the vote. There are different methods used depending on the system, but we'll go with the simplest option: a random selection. Accordingly, we remove Dave, redistribute the votes, and count again. 

We continue doing this until one of the candidates is able to get more the 50% of the overall vote.

Task
You need to implement a system that is able to count votes using a preferential voting system. Votes can either a) be imported from a CSV file (one will be provided) or b) manually entered for an unknown number of candidates. If it is read from a CSV file, the file will define (in the first line) each of the candidates, and then it will record on each subsequent line the votes per voter. For example:

'Paul','Joan','Stewart','Carol','David','Maddy'
3,6,1,4,2,5
1,6,5,4,3,2
6,3,1,2,5,4
4,5,3,1,6,2
2,4,3,6,5,1
6,1,4,5,3,2
3,2,4,6,5,1
1,3,4,6,5,2
The six candidates are listed in the first row. After that, we have the votes from each of eight people.

If the user opts to handle voting in the app, they will need to enter the candidates (for a random number of candidates between 2 and 10), and then will enter the votes for each voter individually into the app. You can assume that these votes are being entered by a third party in bulk (for example, entering postal votes).

When "count" is selected, the software will manage the vote counting process. To count the votes:

Count the number of first preferences for each candidate.
If a candidate has greater than 50%, announce that they are the winner.
If all remaining candidates have the same number of votes, declare a tie.
Calculate the lowest number of votes given to a candidate.
If more than one candidate received the lowest number of points, choose one of the candidates to be precluded.
Remove the precluded candidate from the count, reassign their votes. For example in the first example above, if Dave was precluded, you remove Dave remove Dave and the new first preference becomes Maddy.
Return to step 2.
Help will be available with this process, but you will also receive example results of a vote. Your goal will be to produce the same results. 

After (or during) the count, the results of each round will need to be displayed, showing the votes each candidate received and who was precluded.

The user will need to be presented with an option to:

Export the votes and the results as CSV files. Examples will be provided.
Print the results, showing the result of each round, how many votes each candidate received, and the final outcome.
For maximum marks you need a clean and professional user interface, and, in addition:

A visual representation of the vote. This can be a pie chart, bar graph, or any other means of visual display. This should also be included in the printout.
The ability to combine the two methods of importing votes - manually and through a CSV file.
The ability to remove invalid votes. Votes are invalid if they do not provide a preference for all candidates, if their preferences are not sequential (for example, with 3 candidates number them 2, 1 & 4), or if two candidates receive the same preference. Invalid votes should be flagged when exported, and a count included in the reports.
Other Specifications
You must use C# as the programming language
You will be working in a small group of 3-4 people.
Assignments must be developed with Visual Studio.NET
The completed code needs to be able to be run on a standard Windows 10 computer with Visual Studio.
You need to specify tests, including your own test data.
This is an Agile programming assignment. So coding in order to allow for refactoring later is essential.
Deliverables
You will need to provide:

Working code as a zipped archive containing all source files
500 word reflective report on the process
Marking scheme
The marking scheme is based on:

Does it work: 40%
How well does it meet the requirements: 20%
How well is it written: 40%